CSS grid

it offers a grid based layout systems, with rows and columns, making it easier to design web pages without having to use floats and positioning.

A grid layout consists of a parent element, with one or more child elements.

an html element becomes grid container when its display property is set to grid.
all direct childern of the grid container automatically becomes grid items.

Grid containes grid columns, grid rows and grid gaps,
we can adjust grid gap by changing the properties
1. column-gap
2. row-gap
3. gap -> shorthand property for row-gap and column-gap

eg code snippet

.grid-container{
    display: grid;
    row-gap: 50px;
}


* Grid lines ---->


The lines between columns are called column lines and the lines between rows are called row lines.

these lines can be used to decide the starting and ending positions of an item in the grid.

Place a gird item at column line 1, and let it end on column line 3

.item1{
    grid-column-start: 1;
    grid-column-end: 3;
    /* Same can be done for rows */
}


* Other grid properties ---->


1. grid -> A shorthand property for the grid-template-rows, grid-template-columns, grid-template-areas,
grid-auto-rows, gird-auto-columns, and the grid-auto-flows properties.

2. grid-area -> it can either specify a name to grid item, or it can be used as a shorthand property
for grid-row-start, grid-column-start, grid-row-end, grid-column-end.

3. grid-auto-columns -> specifies a default column size.

4. grid-auto-flow -> Specifies how auto-placed items are inserted in the grid.
    values can be 
        a. row -> places each item by filling each row
        b. column -> places each item by filling each column
        c. dense -> places items to fill any holes in the grid.
        d. row dense -> filling each row and filling any holes.
        e. column dense -> filling each column and filling any holes.


        eg code snippet ->

        .grid-container{
            display:  grid;
            grid-auto-flow: column dense;
        }

5. grid-template-columns -> defines the number of columns in your grid and it can define the width
of each column. The value is a sapce separated list where each value defines the width of respective columns.

    if you want 4 columns then specify the width of each column or fill auto if all columns should have same width.

6. grid-template-rows -> defines the height of each row.

7. justify-content -> it is used to align the whole grid inside the container.
the grid's total width has to be less than the container's width for the justify-content to have any
effect on the ui.
    values -> space-evenly, space-around, space-between, center, start, end.

8. align-content -> it is used to vertically align the whole grid inside the container.
the grid's total height should be less than the container's height for the align-content property to show any effect.

    values for align-content are same as the justiy-content property.

9. grid-column -> shorthand property for grid-column-start and the grid-column-end.
    
    eg -> make a column start on column 1 and end before column 5.

    .item1{
        grid-column: 1 / 5;
    }

    make am item start at column 1 and span 3 columns.

    .item1{
        grid-column: 1 / span 3;
    }

10. grid-row -> similar to previous.


* Naming grid items ----> 

the grid-area property can also be used to assign names to grid items.

Named grid items can be reffered to by the grid-template-area property of the grid container.

.item1{
    grid-area : myArea;
}

.grid-container {
    grid-template-areas: 'myArea myArea myArea . . ';
}

each row is defined by apostrophes(' '). A period sign represents a grid item with no name.


    A complete code snippet example - 

    .item1{grid-area: header;}
    .item2{grid-area: menu;}
    .item3{grid-area: main;}
    .item4{grid-area: right;}
    .item5{grid-area: footer;}

    .grid-container{
        grid-template-areas:
        'header header header header header header' 
        'menu main main main right right'
        'menu footer footer footer footer footer';
    }

*Order of items in the grid ---->

The grid layout allows us to position the items anywhere we like. The first item in the HTML code does not have to appear as the first item in the grid.

.item1{grid-area: 1 / 3 / 2 / 4;}